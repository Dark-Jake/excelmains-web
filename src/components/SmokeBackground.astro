<div id="smoke-bkg" class="fixed top-0 -z-10 h-full w-full"></div>

<script>
  import * as THREE from "three";
  import type { Texture } from "three";

  const $bkg = document.getElementById("smoke-bkg");

  let w = window.innerWidth;
  let h = window.innerHeight;

  const THEME = {
    dark: {
      background: 0x666666,
      light: 0xffffff,
      opacity: 1,
    },
    light: {
      background: 0xeeeeee,
      light: 0xffffff,
      opacity: 0.2,
    },
  } as const;

  const themePreference = window.getThemePreference();
  let currentTheme = THEME[themePreference];

  // Escena 🖼️
  const scene = new THREE.Scene();

  // Cámara 📹
  const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000);
  camera.position.z = 10;
  scene.add(camera);

  // Renderizador
  const renderer = new THREE.WebGLRenderer();
  renderer.setSize(w, h);
  renderer.setClearColor(currentTheme.background, 1);

  $bkg?.appendChild(renderer.domElement);

  // Luz direccional
  const light = new THREE.DirectionalLight(currentTheme.light, 0.5);
  light.position.set(-1, 3, 1);
  scene.add(light);

  const smokeParticles: THREE.Mesh[] = [];

  const loader = new THREE.TextureLoader();
  loader.crossOrigin = "";

  loader.load("/smoke.webp", (texture: Texture) => {
    const smokeGeo = new THREE.PlaneGeometry(300, 300);
    const smokeMaterial = new THREE.MeshLambertMaterial({
      map: texture,
      transparent: true,
      opacity: currentTheme.opacity,
    });

    const NUM_OF_PARTICLES = 300;
    for (let p = 0; p < NUM_OF_PARTICLES; p++) {
      const particle = new THREE.Mesh(smokeGeo, smokeMaterial);
      particle.position.set(
        Math.random() * 500 - 250,
        Math.random() * 500 - 250,
        Math.random() * 1000 - 100
      );
      particle.rotation.z = Math.random() * 360;
      scene.add(particle);
      smokeParticles.push(particle);

      // Verificar si particle.material es un solo material
      if (!(particle.material instanceof Array)) {
        // Forzar el tipo de particle.material a Material
        const material = particle.material as THREE.Material;
        // Verificar si la propiedad opacity existe en el material
        if ("opacity" in material) {
          material.opacity = currentTheme.opacity;
        }
      }
    }
  });

  function resize() {
    h = window.innerHeight;
    w = window.innerWidth;
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    renderer.setSize(w, h);
  }

  function animate() {
    requestAnimationFrame(animate);

    smokeParticles.forEach((particle) => {
      particle.rotation.z += 0.001;
    });

    renderer.render(scene, camera);
  }

  animate();

  window.addEventListener("resize", resize);

  window.addEventListener("theme-changed", () => {
    const themePreference = window.getThemePreference();
    currentTheme = THEME[themePreference];
    light.color.setHex(currentTheme.light);
    renderer.setClearColor(currentTheme.background, 1);

    smokeParticles.forEach((particle) => {
      particle.material.opacity = currentTheme.opacity;
    });
  });
</script>
